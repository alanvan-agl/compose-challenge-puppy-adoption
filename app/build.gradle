plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
} catch(Exception ex){
}


android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.example.androiddevchallenge"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            buildConfigField 'String', 'API_KEY', properties.getProperty('api_key')
            buildConfigField 'String', 'SECRET', properties.getProperty('secret')
        }
        release {
            minifyEnabled false
            buildConfigField 'String', 'API_KEY', properties.getProperty('api_key')
            buildConfigField 'String', 'SECRET', properties.getProperty('secret')
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        compose true

        // Disable unused AGP features
        aidl false
        renderScript false
        resValues false
        shaders false
    }

    composeOptions {
        kotlinCompilerExtensionVersion "${versions["compose"]}"
    }

    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

configurations {
    ktlint
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "--reporter=plain?group_by_file", "src/**/*.kt"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

dependencies {
    implementation "androidx.core:core-ktx:${versions.androidx_core}"
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.activity:activity-compose:${versions.activity_compose}"
    implementation "androidx.compose.ui:ui:${versions.compose}"
    implementation "androidx.compose.material:material:${versions.compose}"
    implementation "androidx.compose.material:material-icons-extended:${versions.compose}"
    implementation "androidx.compose.ui:ui-tooling:${versions.compose}"
    implementation "androidx.navigation:navigation-compose:${versions.navigation_compose}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycle}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "com.squareup.moshi:moshi:${versions.moshi}"
    implementation "com.squareup.moshi:moshi-adapters:${versions.moshi}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging}"
    implementation "dev.chrisbanes.accompanist:accompanist-glide:${versions.glide}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"

    ktlint "com.pinterest:ktlint:${versions.ktlint}"

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:${versions.compose}"
}